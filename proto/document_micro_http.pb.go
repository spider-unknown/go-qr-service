// Code generated by protoc-gen-micro
// source: document.proto
package pb

import (
	context "context"
	v3 "github.com/unistack-org/micro-client-http/v3"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	codec "github.com/unistack-org/micro/v3/codec"
	server "github.com/unistack-org/micro/v3/server"
	http "net/http"
)

type documentQRProcessingServiceClient struct {
	c    client.Client
	name string
}

func NewDocumentQRProcessingServiceClient(name string, c client.Client) DocumentQRProcessingServiceClient {
	return &documentQRProcessingServiceClient{c: c, name: name}
}

func (c *documentQRProcessingServiceClient) GetDocumentQR(ctx context.Context, req *PostQRRequest, opts ...client.CallOption) (*PostQRResponse, error) {
	opts = append(opts,
		v3.Method(http.MethodGet),
		v3.Path("/document/{document_id}"),
	)
	rsp := &PostQRResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "DocumentQRProcessingService.GetDocumentQR", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *documentQRProcessingServiceClient) PostDocumentQR(ctx context.Context, req *PostQRRequest, opts ...client.CallOption) (*PostQRResponse, error) {
	opts = append(opts,
		v3.Method(http.MethodPost),
		v3.Path("/document/{document_id}"),
	)
	rsp := &PostQRResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "DocumentQRProcessingService.PostDocumentQR", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *documentQRProcessingServiceClient) PostQRImage(ctx context.Context, req *PostQRRequest, opts ...client.CallOption) (*codec.Frame, error) {
	opts = append(opts,
		v3.Method(http.MethodGet),
		v3.Path("/document/{document_id}/image"),
	)
	rsp := &codec.Frame{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "DocumentQRProcessingService.PostQRImage", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *documentQRProcessingServiceClient) PostNewDocument(ctx context.Context, req *PostNewDocumentRequest, opts ...client.CallOption) (*PostNewDocumentResponse, error) {
	opts = append(opts,
		v3.Method(http.MethodPost),
		v3.Path("/new/document"),
	)
	rsp := &PostNewDocumentResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "DocumentQRProcessingService.PostNewDocument", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type documentQRProcessingServiceServer struct {
	DocumentQRProcessingServiceServer
}

func (h *documentQRProcessingServiceServer) GetDocumentQR(ctx context.Context, req *PostQRRequest, rsp *PostQRResponse) error {
	return h.DocumentQRProcessingServiceServer.GetDocumentQR(ctx, req, rsp)
}

func (h *documentQRProcessingServiceServer) PostDocumentQR(ctx context.Context, req *PostQRRequest, rsp *PostQRResponse) error {
	return h.DocumentQRProcessingServiceServer.PostDocumentQR(ctx, req, rsp)
}

func (h *documentQRProcessingServiceServer) PostQRImage(ctx context.Context, req *PostQRRequest, rsp *codec.Frame) error {
	return h.DocumentQRProcessingServiceServer.PostQRImage(ctx, req, rsp)
}

func (h *documentQRProcessingServiceServer) PostNewDocument(ctx context.Context, req *PostNewDocumentRequest, rsp *PostNewDocumentResponse) error {
	return h.DocumentQRProcessingServiceServer.PostNewDocument(ctx, req, rsp)
}

func RegisterDocumentQRProcessingServiceServer(s server.Server, sh DocumentQRProcessingServiceServer, opts ...server.HandlerOption) error {
	type documentQRProcessingService interface {
		GetDocumentQR(ctx context.Context, req *PostQRRequest, rsp *PostQRResponse) error
		PostDocumentQR(ctx context.Context, req *PostQRRequest, rsp *PostQRResponse) error
		PostQRImage(ctx context.Context, req *PostQRRequest, rsp *codec.Frame) error
		PostNewDocument(ctx context.Context, req *PostNewDocumentRequest, rsp *PostNewDocumentResponse) error
	}
	type DocumentQRProcessingService struct {
		documentQRProcessingService
	}
	h := &documentQRProcessingServiceServer{sh}
	var nopts []server.HandlerOption
	for _, endpoint := range NewDocumentQRProcessingServiceEndpoints() {
		nopts = append(nopts, api.WithEndpoint(endpoint))
	}
	return s.Handle(s.NewHandler(&DocumentQRProcessingService{h}, append(nopts, opts...)...))
}
